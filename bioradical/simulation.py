from radical.entk import Task, Stage

_simulation_file_suffixes = ['.coor', '.xsc', '.vel']
_namd = '/u/sciteam/jphillip/NAMD_build.latest/NAMD_2.12_CRAY-XE-ugni-BlueWaters-memopt/namd2'
# _namd = 'namd2'


class Simulation(Task):

    def __init__(self, step, pipeline, system='complex', constraint='f4'):
        
        super(Simulation, self).__init__()

        self.step = step
        self.pipeline = pipeline

        self._system = system
        self._constraint = constraint

        self.executable = [_namd]

        self._update_linked_data_list()

    @property
    def step(self):
        return self.name

    @step.setter
    def step(self, value):
        self.name = value
        self.arguments = ['{}.conf'.format(self.name)]
        self.copy_input_data = ['$SHARED/{}.conf'.format(self.name)]

    @property
    def system(self):
        return self._system

    @system.setter
    def system(self, value):
        self._system = value
        self._update_linked_data_list()

    @property
    def constraint(self):
        return self._constraint

    @constraint.setter
    def constraint(self, value):
        self._constraint = value
        self._update_linked_data_list()

    def _update_linked_data_list(self):
        to_link = ['$SHARED/{}.top'.format(self.system), '$SHARED/{}.pdb'.format(self.constraint)]

        # Copy input data generated by the previous step or the PDB if this is the first step.
        if self.pipeline.stages:
            previous_stage = self.pipeline.stages[-1]
            (previous_task,) = previous_stage.tasks
            path = '$Pipeline_{}_Stage_{}_Task_{}'.format(self.pipeline.uid, previous_stage.uid, previous_task.uid)
            to_link.extend("{}/{}{}".format(path, previous_task.name, suffix) for suffix in _simulation_file_suffixes)
        else:
            to_link.append('$SHARED/{}.pdb'.format(self.system))

        self.link_input_data = to_link

    @property
    def as_stage(self):
        stage = Stage()
        stage.add_tasks(self)
        return stage

