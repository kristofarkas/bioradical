from radical.entk import Task, Stage

_simulation_file_suffixes = ['.coor', '.xsc', '.vel']
_namd = '/u/sciteam/jphillip/NAMD_LATEST_CRAY-XE-ugni-smp-BlueWaters/namd2'
# _namd = 'namd2'


class Simulation(Task):
    def __init__(self, step, pipeline, system=None, descriptors=None):
        """Create a new simulation step.

        :param step: The name of the step, for example: min, eq, prod, sim etc.
        :param pipeline: The pipeline that it will be in. Used to get previous steps.
        :param system: The name of the PDB and topology files. (without suffix)
        :param descriptors: Other files that are required to run the simulation (constraints, tags, etc.)
        """
        super(Simulation, self).__init__()

        self.step = step
        self.pipeline = pipeline

        self._system = system or ''
        self._descriptors = descriptors or []
        self._update_linked_data_list()

        self.executable = [_namd]
        self.cores = 16
        self.mpi = True

        # self.pre_exec = ['export OMP_NUM_THREADS=1']
        # self.cpu_reqs = {'processes': 1, 'process_type': 'MPI', 'threads_per_process': 31, 'thread_type': None}

    @property
    def step(self):
        return self.name

    @step.setter
    def step(self, value):
        self.name = value
        self.arguments = ['{}.conf'.format(self.name)]
        self.copy_input_data = ['$SHARED/{}.conf'.format(self.name)]

    @property
    def system(self):
        return self._system

    @system.setter
    def system(self, value):
        self._system = value
        self._update_linked_data_list()

    @property
    def descriptors(self):
        return self._descriptors

    @descriptors.setter
    def descriptors(self, value):
        self._descriptors = value
        self._update_linked_data_list()

    def _update_linked_data_list(self):

        to_link = ['$SHARED/{}.top'.format(self.system)] + ['$SHARED/{}'.format(f) for f in self.descriptors]

        # Copy input data generated by the previous step or the PDB if this is the first step.
        if self.pipeline.stages:
            previous_stage = self.pipeline.stages[-1]
            (previous_task,) = previous_stage.tasks
            path = '$Pipeline_{}_Stage_{}_Task_{}'.format(self.pipeline.uid, previous_stage.uid, previous_task.uid)
            to_link.extend("{}/{}{}".format(path, previous_task.name, suffix) for suffix in _simulation_file_suffixes)
        else:
            to_link.append('$SHARED/{}.pdb'.format(self.system))

        self.link_input_data = to_link

    @property
    def as_stage(self):
        stage = Stage()
        stage.add_tasks(self)
        return stage

