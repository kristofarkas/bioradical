from radical.entk import Task, Stage

_simulation_file_suffixes = ['.coor', '.xsc', '.vel']


class Simulation(Stage):

    def __init__(self, name, p):
        super(Simulation, self).__init__()

        task = Task()
        task.name = name
        task.executable = ['/u/sciteam/jphillip/NAMD_build.latest/NAMD_2.12_CRAY-XE-ugni-BlueWaters-memopt/namd2']
        task.arguments = ['{}.conf'.format(name), '&>', '{}.log'.format(name)]

        # Copy the *.conf file from $SHARED
        task.copy_input_data = ['$SHARED/{}.conf'.format(name)]

        # Link the topology, constraint and alchemical tag file
        to_link = ['$SHARED/complex.top', '$SHARED/f4.pdb']

        # Copy input data generated by the previous step or the PDB if this is the first step.
        if p.stages:
            previous_stage = p.stages[-1]
            (previous_task,) = previous_stage.tasks
            path = '$Pipeline_{}_Stage_{}_Task_{}'.format(p.uid, previous_stage.uid, previous_task.uid)
            to_link.extend("{}/{}{}".format(path, previous_task.name, suffix) for suffix in _simulation_file_suffixes)
        else:
            to_link.append('$SHARED/complex.pdb')
        task.link_input_data = to_link

        self.add_tasks(task)
