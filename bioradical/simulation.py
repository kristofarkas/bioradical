from radical.entk import Task, Stage

_simulation_file_suffixes = ['.coor', '.xsc', '.vel']
_namd = '/u/sciteam/jphillip/NAMD_build.latest/NAMD_2.12_CRAY-XE-ugni-BlueWaters-memopt/namd2'
_namd = 'namd2'


class Simulation(object):

    def __init__(self, name, pipeline, system='complex', constraint='f4'):

        self.name = name
        self.pipeline = pipeline
        self.system = system
        self.constraint = constraint

    @property
    def as_stage(self):
        stage = Stage()
        stage.add_tasks(self.as_task)
        return stage

    @property
    def as_task(self):
        task = Task()
        task.name = self.name
        task.executable = [_namd]
        task.arguments = ['{}.conf'.format(self.name)]

        # Copy the *.conf file from $SHARED
        task.copy_input_data = ['$SHARED/{}.conf'.format(self.name)]

        # Link the topology, constraint files
        to_link = ['$SHARED/{}.top'.format(self.system), '$SHARED/{}.pdb'.format(self.constraint)]

        # Copy input data generated by the previous step or the PDB if this is the first step.
        if self.pipeline.stages:
            previous_stage = self.pipeline.stages[-1]
            (previous_task,) = previous_stage.tasks
            path = '$Pipeline_{}_Stage_{}_Task_{}'.format(self.pipeline.uid, previous_stage.uid, previous_task.uid)
            to_link.extend("{}/{}{}".format(path, previous_task.name, suffix) for suffix in _simulation_file_suffixes)
        else:
            to_link.append('$SHARED/{}.pdb'.format(self.system))
        task.link_input_data = to_link

        return task

